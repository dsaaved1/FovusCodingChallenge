{"ast":null,"code":"var _jsxFileName = \"/Users/diegosaavedra/Desktop/FovusCodingChallenge/frontend/src/components/FormContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { MAX_IMAGE_SIZE, API_ENDPOINT } from '../config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormContainer = () => {\n  _s();\n  const [image, setImage] = useState('');\n  const [uploadURL, setUploadURL] = useState('');\n  const onFileChange = e => {\n    let files = e.target.files || e.dataTransfer.files;\n    if (!files.length) return;\n    createImage(files[0]);\n  };\n  const createImage = file => {\n    let reader = new FileReader();\n    reader.onload = e => {\n      if (!e.target.result.includes('data:image/jpeg')) {\n        return alert('Wrong file type - JPG only.');\n      }\n      if (e.target.result.length > MAX_IMAGE_SIZE) {\n        return alert('Image is too large.');\n      }\n      setImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  };\n  const removeImage = () => {\n    setImage('');\n  };\n  const uploadImage = async () => {\n    const response = await axios.get(API_ENDPOINT);\n    let binary = atob(image.split(',')[1]);\n    let array = [];\n    for (let i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    let blobData = new Blob([new Uint8Array(array)], {\n      type: 'image/jpeg'\n    });\n    const result = await fetch(response.data.uploadURL, {\n      method: 'PUT',\n      body: blobData\n    });\n    setUploadURL(response.data.uploadURL.split('?')[0]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"S3 Uploader Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), !image ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select an image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: onFileChange,\n        accept: \"image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), !uploadURL && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: removeImage,\n          children: \"Remove image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: uploadImage,\n          children: \"Upload image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), uploadURL && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Success! Image uploaded to bucket.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(FormContainer, \"XLlMuEyI4izMs1fll5IzMQbqiSQ=\");\n_c = FormContainer;\nexport default FormContainer;\nvar _c;\n$RefreshReg$(_c, \"FormContainer\");","map":{"version":3,"names":["React","useState","axios","MAX_IMAGE_SIZE","API_ENDPOINT","jsxDEV","_jsxDEV","Fragment","_Fragment","FormContainer","_s","image","setImage","uploadURL","setUploadURL","onFileChange","e","files","target","dataTransfer","length","createImage","file","reader","FileReader","onload","result","includes","alert","readAsDataURL","removeImage","uploadImage","response","get","binary","atob","split","array","i","push","charCodeAt","blobData","Blob","Uint8Array","type","fetch","data","method","body","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","accept","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/diegosaavedra/Desktop/FovusCodingChallenge/frontend/src/components/FormContainer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { MAX_IMAGE_SIZE, API_ENDPOINT } from '../config';\n\nconst FormContainer = () => {\n  const [image, setImage] = useState('');\n  const [uploadURL, setUploadURL] = useState('');\n\n  const onFileChange = (e) => {\n    let files = e.target.files || e.dataTransfer.files;\n    if (!files.length) return;\n    createImage(files[0]);\n  };\n\n  const createImage = (file) => {\n    let reader = new FileReader();\n    reader.onload = (e) => {\n      if (!e.target.result.includes('data:image/jpeg')) {\n        return alert('Wrong file type - JPG only.');\n      }\n      if (e.target.result.length > MAX_IMAGE_SIZE) {\n        return alert('Image is too large.');\n      }\n      setImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const removeImage = () => {\n    setImage('');\n  };\n\n  const uploadImage = async () => {\n    const response = await axios.get(API_ENDPOINT);\n    let binary = atob(image.split(',')[1]);\n    let array = [];\n    for (let i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    let blobData = new Blob([new Uint8Array(array)], { type: 'image/jpeg' });\n    const result = await fetch(response.data.uploadURL, {\n      method: 'PUT',\n      body: blobData,\n    });\n    setUploadURL(response.data.uploadURL.split('?')[0]);\n  };\n\n  return (\n    <div>\n      <h1>S3 Uploader Test</h1>\n\n      {!image ? (\n        <div>\n          <h2>Select an image</h2>\n          <input type=\"file\" onChange={onFileChange} accept=\"image/jpeg\" />\n        </div>\n      ) : (\n        <div>\n          <img src={image} alt=\"Selected\" />\n          {!uploadURL && (\n            <>\n              <button onClick={removeImage}>Remove image</button>\n              <button onClick={uploadImage}>Upload image</button>\n            </>\n          )}\n        </div>\n      )}\n      {uploadURL && <h2>Success! Image uploaded to bucket.</h2>}\n    </div>\n  );\n};\n\nexport default FormContainer;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,YAAY,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMc,YAAY,GAAIC,CAAC,IAAK;IAC1B,IAAIC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK,IAAID,CAAC,CAACG,YAAY,CAACF,KAAK;IAClD,IAAI,CAACA,KAAK,CAACG,MAAM,EAAE;IACnBC,WAAW,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAMI,WAAW,GAAIC,IAAI,IAAK;IAC5B,IAAIC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC7BD,MAAM,CAACE,MAAM,GAAIT,CAAC,IAAK;MACrB,IAAI,CAACA,CAAC,CAACE,MAAM,CAACQ,MAAM,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAChD,OAAOC,KAAK,CAAC,6BAA6B,CAAC;MAC7C;MACA,IAAIZ,CAAC,CAACE,MAAM,CAACQ,MAAM,CAACN,MAAM,GAAGjB,cAAc,EAAE;QAC3C,OAAOyB,KAAK,CAAC,qBAAqB,CAAC;MACrC;MACAhB,QAAQ,CAACI,CAAC,CAACE,MAAM,CAACQ,MAAM,CAAC;IAC3B,CAAC;IACDH,MAAM,CAACM,aAAa,CAACP,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBlB,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAMmB,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,GAAG,CAAC7B,YAAY,CAAC;IAC9C,IAAI8B,MAAM,GAAGC,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,IAAIC,KAAK,GAAG,EAAE;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACd,MAAM,EAAEkB,CAAC,EAAE,EAAE;MACtCD,KAAK,CAACE,IAAI,CAACL,MAAM,CAACM,UAAU,CAACF,CAAC,CAAC,CAAC;IAClC;IACA,IAAIG,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACN,KAAK,CAAC,CAAC,EAAE;MAAEO,IAAI,EAAE;IAAa,CAAC,CAAC;IACxE,MAAMlB,MAAM,GAAG,MAAMmB,KAAK,CAACb,QAAQ,CAACc,IAAI,CAACjC,SAAS,EAAE;MAClDkC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEP;IACR,CAAC,CAAC;IACF3B,YAAY,CAACkB,QAAQ,CAACc,IAAI,CAACjC,SAAS,CAACuB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,CAAC;EAED,oBACE9B,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAA2C,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAExB,CAAC1C,KAAK,gBACLL,OAAA;MAAA2C,QAAA,gBACE3C,OAAA;QAAA2C,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB/C,OAAA;QAAOsC,IAAI,EAAC,MAAM;QAACU,QAAQ,EAAEvC,YAAa;QAACwC,MAAM,EAAC;MAAY;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC,gBAEN/C,OAAA;MAAA2C,QAAA,gBACE3C,OAAA;QAAKkD,GAAG,EAAE7C,KAAM;QAAC8C,GAAG,EAAC;MAAU;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACjC,CAACxC,SAAS,iBACTP,OAAA,CAAAE,SAAA;QAAAyC,QAAA,gBACE3C,OAAA;UAAQoD,OAAO,EAAE5B,WAAY;UAAAmB,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnD/C,OAAA;UAAQoD,OAAO,EAAE3B,WAAY;UAAAkB,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACnD,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,EACAxC,SAAS,iBAAIP,OAAA;MAAA2C,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAAC3C,EAAA,CAlEID,aAAa;AAAAkD,EAAA,GAAblD,aAAa;AAoEnB,eAAeA,aAAa;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}