{"ast":null,"code":"// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array or arguments callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Check if obj is array-like\n  var isArray = obj.constructor === Array || typeof obj.callee === 'function';\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object' && !isArray) {\n    obj = [obj];\n  }\n\n  // Iterate over array values\n  if (isArray) {\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  }\n  // Iterate over object keys\n  else {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(obj1 /*, obj2, obj3, ...*/) {\n  var result = {};\n  forEach(arguments, function (obj) {\n    forEach(obj, function (val, key) {\n      result[key] = val;\n    });\n  });\n  return result;\n}\nmodule.exports = {\n  isArray: isArray,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  forEach: forEach,\n  merge: merge,\n  trim: trim\n};","map":{"version":3,"names":["toString","Object","prototype","isArray","val","call","isString","isNumber","isObject","isDate","isFile","isBlob","trim","str","replace","forEach","obj","fn","constructor","Array","callee","i","l","length","key","hasOwnProperty","merge","obj1","result","arguments","module","exports"],"sources":["/Users/diegosaavedra/Desktop/FovusCodingChallenge/frontend/node_modules/axios/lib/utils.js"],"sourcesContent":["// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array or arguments callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Check if obj is array-like\n  var isArray = obj.constructor === Array || typeof obj.callee === 'function';\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object' && !isArray) {\n    obj = [obj];\n  }\n\n  // Iterate over array values\n  if (isArray) {\n    for (var i=0, l=obj.length; i<l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  }\n  // Iterate over object keys\n  else {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(obj1/*, obj2, obj3, ...*/) {\n  var result = {};\n  forEach(arguments, function (obj) {\n    forEach(obj, function (val, key) {\n      result[key] = val;\n    });\n  });\n  return result;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  forEach: forEach,\n  merge: merge,\n  trim: trim\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}