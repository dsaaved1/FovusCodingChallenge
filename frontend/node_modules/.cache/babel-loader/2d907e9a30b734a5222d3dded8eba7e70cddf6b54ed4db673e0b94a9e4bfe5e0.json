{"ast":null,"code":"const MAX_IMAGE_SIZE = 1000000;\n\n/* ENTER YOUR ENDPOINT HERE */\nconst API_ENDPOINT = 'https://g7k976a75d.execute-api.us-east-1.amazonaws.com/uploads';\nnew Vue({\n  el: \"#app\",\n  template: `\n    <div>\n      <h1>S3 Uploader Test</h1>\n  \n      <div v-if=\"!uploadURL\">\n        <div class=\"input-group\">\n          <label>Text input:</label>\n          <input type=\"text\" v-model=\"textInput\">\n        </div>\n        <div class=\"input-group\">\n          <label>File input:</label>\n          <input type=\"file\" @change=\"onFileChange\" accept=\"image/jpeg\">\n          <img v-if=\"image\" :src=\"image\" class=\"preview-image\" />\n          <button v-if=\"image\" @click=\"removeImage\" class=\"remove-button\">Remove File</button>\n        </div>\n        <button @click=\"uploadImage\" :disabled=\"!canSubmit\">Submit</button>\n      </div>\n      \n      <div v-if=\"uploadURL\">\n        <h2>Success! File uploaded to bucket.</h2>\n        <button @click=\"resetForm\">Upload another file and text input</button>\n      </div>\n    </div>\n  `,\n  data: {\n    image: '',\n    uploadURL: '',\n    textInput: ''\n  },\n  computed: {\n    canSubmit() {\n      return this.textInput && this.image;\n    }\n  },\n  methods: {\n    onFileChange(e) {\n      let files = e.target.files || e.dataTransfer.files;\n      if (!files.length) return;\n      this.createImage(files[0]);\n    },\n    createImage(file) {\n      let reader = new FileReader();\n      reader.onload = e => {\n        if (!e.target.result.includes('data:image/jpeg')) {\n          return alert('Wrong file type - JPG only.');\n        }\n        if (e.target.result.length > MAX_IMAGE_SIZE) {\n          return alert('Image is too large.');\n        }\n        this.image = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    },\n    removeImage() {\n      this.image = '';\n    },\n    async uploadImage() {\n      const response = await axios({\n        method: 'GET',\n        url: API_ENDPOINT\n      });\n      let binary = atob(this.image.split(',')[1]);\n      let array = [];\n      for (let i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n      let blobData = new Blob([new Uint8Array(array)], {\n        type: 'image/jpeg'\n      });\n      const result = await fetch(response.uploadURL, {\n        method: 'PUT',\n        body: blobData\n      });\n      this.uploadURL = response.uploadURL.split('?')[0];\n    },\n    resetForm() {\n      this.image = '';\n      this.uploadURL = '';\n      this.textInput = '';\n    }\n  }\n});","map":{"version":3,"names":["MAX_IMAGE_SIZE","API_ENDPOINT","Vue","el","template","data","image","uploadURL","textInput","computed","canSubmit","methods","onFileChange","e","files","target","dataTransfer","length","createImage","file","reader","FileReader","onload","result","includes","alert","readAsDataURL","removeImage","uploadImage","response","axios","method","url","binary","atob","split","array","i","push","charCodeAt","blobData","Blob","Uint8Array","type","fetch","body","resetForm"],"sources":["/Users/diegosaavedra/Desktop/FovusCodingChallenge/frontend/src/App.js"],"sourcesContent":["const MAX_IMAGE_SIZE = 1000000;\n\n/* ENTER YOUR ENDPOINT HERE */\nconst API_ENDPOINT = 'https://g7k976a75d.execute-api.us-east-1.amazonaws.com/uploads';\n\nnew Vue({\n  el: \"#app\",\n  template: `\n    <div>\n      <h1>S3 Uploader Test</h1>\n  \n      <div v-if=\"!uploadURL\">\n        <div class=\"input-group\">\n          <label>Text input:</label>\n          <input type=\"text\" v-model=\"textInput\">\n        </div>\n        <div class=\"input-group\">\n          <label>File input:</label>\n          <input type=\"file\" @change=\"onFileChange\" accept=\"image/jpeg\">\n          <img v-if=\"image\" :src=\"image\" class=\"preview-image\" />\n          <button v-if=\"image\" @click=\"removeImage\" class=\"remove-button\">Remove File</button>\n        </div>\n        <button @click=\"uploadImage\" :disabled=\"!canSubmit\">Submit</button>\n      </div>\n      \n      <div v-if=\"uploadURL\">\n        <h2>Success! File uploaded to bucket.</h2>\n        <button @click=\"resetForm\">Upload another file and text input</button>\n      </div>\n    </div>\n  `,\n  data: {\n    image: '',\n    uploadURL: '',\n    textInput: ''\n  },\n  computed: {\n    canSubmit () {\n      return this.textInput && this.image;\n    }\n  },\n  methods: {\n    onFileChange (e) {\n      let files = e.target.files || e.dataTransfer.files;\n      if (!files.length) return;\n      this.createImage(files[0]);\n    },\n    createImage (file) {\n      let reader = new FileReader();\n      reader.onload = (e) => {\n        if (!e.target.result.includes('data:image/jpeg')) {\n          return alert('Wrong file type - JPG only.');\n        }\n        if (e.target.result.length > MAX_IMAGE_SIZE) {\n          return alert('Image is too large.');\n        }\n        this.image = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    },\n    removeImage () {\n      this.image = '';\n    },\n    async uploadImage () {\n      const response = await axios({\n        method: 'GET',\n        url: API_ENDPOINT\n      });\n      let binary = atob(this.image.split(',')[1]);\n      let array = [];\n      for (let i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n      let blobData = new Blob([new Uint8Array(array)], { type: 'image/jpeg' });\n      const result = await fetch(response.uploadURL, {\n        method: 'PUT',\n        body: blobData\n      });\n      this.uploadURL = response.uploadURL.split('?')[0];\n    },\n    resetForm () {\n      this.image = '';\n      this.uploadURL = '';\n      this.textInput = '';\n    }\n  }\n});\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}