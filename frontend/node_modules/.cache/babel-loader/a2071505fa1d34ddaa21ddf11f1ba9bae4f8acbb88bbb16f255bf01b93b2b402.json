{"ast":null,"code":"var buildUrl = require('./../buildUrl');\nvar cookies = require('./../cookies');\nvar defaults = require('./../defaults');\nvar parseHeaders = require('./../parseHeaders');\nvar transformData = require('./../transformData');\nvar urlIsSameOrigin = require('./../urlIsSameOrigin');\nvar utils = require('./../utils');\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  // Transform request data\n  var data = transformData(config.data, config.headers, config.transformRequest);\n\n  // Merge headers\n  var headers = utils.merge(defaults.headers.common, defaults.headers[config.method] || {}, config.headers || {});\n\n  // Create the request\n  var request = new (XMLHttpRequest || ActiveXObject)('Microsoft.XMLHTTP');\n  request.open(config.method, buildUrl(config.url, config.params), true);\n\n  // Listen for ready state\n  request.onreadystatechange = function () {\n    if (request && request.readyState === 4) {\n      // Prepare the response\n      var headers = parseHeaders(request.getAllResponseHeaders());\n      var response = {\n        data: transformData(request.responseText, headers, config.transformResponse),\n        status: request.status,\n        headers: headers,\n        config: config\n      };\n\n      // Resolve or reject the Promise based on the status\n      (request.status >= 200 && request.status < 300 ? resolve : reject)(response.data, response.status, response.headers, response.config);\n\n      // Clean up request\n      request = null;\n    }\n  };\n\n  // Add xsrf header\n  var xsrfValue = urlIsSameOrigin(config.url) ? cookies.read(config.xsrfCookieName || defaults.xsrfCookieName) : undefined;\n  if (xsrfValue) {\n    headers[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;\n  }\n\n  // Add headers to the request\n  utils.forEach(headers, function (val, key) {\n    // Remove Content-Type if data is undefined\n    if (!data && key.toLowerCase() === 'content-type') {\n      delete headers[key];\n    }\n    // Otherwise add header to the request\n    else {\n      request.setRequestHeader(key, val);\n    }\n  });\n\n  // Add withCredentials to request if needed\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  }\n\n  // Add responseType to request if needed\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  // Send the request\n  request.send(data);\n};","map":{"version":3,"names":["buildUrl","require","cookies","defaults","parseHeaders","transformData","urlIsSameOrigin","utils","module","exports","xhrAdapter","resolve","reject","config","data","headers","transformRequest","merge","common","method","request","XMLHttpRequest","ActiveXObject","open","url","params","onreadystatechange","readyState","getAllResponseHeaders","response","responseText","transformResponse","status","xsrfValue","read","xsrfCookieName","undefined","xsrfHeaderName","forEach","val","key","toLowerCase","setRequestHeader","withCredentials","responseType","e","send"],"sources":["/Users/diegosaavedra/Desktop/FovusCodingChallenge/frontend/node_modules/axios/lib/adapters/xhr.js"],"sourcesContent":["var buildUrl = require('./../buildUrl');\nvar cookies = require('./../cookies');\nvar defaults = require('./../defaults');\nvar parseHeaders = require('./../parseHeaders');\nvar transformData = require('./../transformData');\nvar urlIsSameOrigin = require('./../urlIsSameOrigin');\nvar utils = require('./../utils');\n\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  // Transform request data\n  var data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Merge headers\n  var headers = utils.merge(\n    defaults.headers.common,\n    defaults.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  // Create the request\n  var request = new(XMLHttpRequest || ActiveXObject)('Microsoft.XMLHTTP');\n  request.open(config.method, buildUrl(config.url, config.params), true);\n\n  // Listen for ready state\n  request.onreadystatechange = function () {\n    if (request && request.readyState === 4) {\n      // Prepare the response\n      var headers = parseHeaders(request.getAllResponseHeaders());\n      var response = {\n        data: transformData(\n          request.responseText,\n          headers,\n          config.transformResponse\n        ),\n        status: request.status,\n        headers: headers,\n        config: config\n      };\n\n      // Resolve or reject the Promise based on the status\n      (request.status >= 200 && request.status < 300\n        ? resolve\n        : reject)(\n          response.data,\n          response.status,\n          response.headers,\n          response.config\n        );\n\n      // Clean up request\n      request = null;\n    }\n  };\n\n  // Add xsrf header\n  var xsrfValue = urlIsSameOrigin(config.url)\n    ? cookies.read(config.xsrfCookieName || defaults.xsrfCookieName)\n    : undefined;\n  if (xsrfValue) {\n    headers[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;\n  }\n\n  // Add headers to the request\n  utils.forEach(headers, function (val, key) {\n    // Remove Content-Type if data is undefined\n    if (!data && key.toLowerCase() === 'content-type') {\n      delete headers[key];\n    }\n    // Otherwise add header to the request\n    else {\n      request.setRequestHeader(key, val);\n    }\n  });\n\n  // Add withCredentials to request if needed\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  }\n\n  // Add responseType to request if needed\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  // Send the request\n  request.send(data);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}