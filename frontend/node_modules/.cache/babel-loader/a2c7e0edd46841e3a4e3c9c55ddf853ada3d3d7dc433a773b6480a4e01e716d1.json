{"ast":null,"code":"\"use strict\";\n\n/* global toString */\nvar isArray = require(\"./utils\").isArray;\nvar isFunction = require(\"./utils\").isFunction;\n\n/**\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The return promise\n  is fulfilled with an array that gives all the values in the order they were\n  passed in the `promises` array argument.\n\n  Example:\n\n  ```javascript\n  var promise1 = RSVP.resolve(1);\n  var promise2 = RSVP.resolve(2);\n  var promise3 = RSVP.resolve(3);\n  var promises = [ promise1, promise2, promise3 ];\n\n  RSVP.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  var promise1 = RSVP.resolve(1);\n  var promise2 = RSVP.reject(new Error(\"2\"));\n  var promise3 = RSVP.reject(new Error(\"3\"));\n  var promises = [ promise1, promise2, promise3 ];\n\n  RSVP.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @for RSVP\n  @param {Array} promises\n  @param {String} label\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n*/\nfunction all(promises) {\n  /*jshint validthis:true */\n  var Promise = this;\n  if (!isArray(promises)) {\n    throw new TypeError('You must pass an array to all.');\n  }\n  return new Promise(function (resolve, reject) {\n    var results = [],\n      remaining = promises.length,\n      promise;\n    if (remaining === 0) {\n      resolve([]);\n    }\n    function resolver(index) {\n      return function (value) {\n        resolveAll(index, value);\n      };\n    }\n    function resolveAll(index, value) {\n      results[index] = value;\n      if (--remaining === 0) {\n        resolve(results);\n      }\n    }\n    for (var i = 0; i < promises.length; i++) {\n      promise = promises[i];\n      if (promise && isFunction(promise.then)) {\n        promise.then(resolver(i), reject);\n      } else {\n        resolveAll(i, promise);\n      }\n    }\n  });\n}\nexports.all = all;","map":{"version":3,"names":["isArray","require","isFunction","all","promises","Promise","TypeError","resolve","reject","results","remaining","length","promise","resolver","index","value","resolveAll","i","then","exports"],"sources":["/Users/diegosaavedra/Desktop/FovusCodingChallenge/frontend/node_modules/es6-promise/dist/commonjs/promise/all.js"],"sourcesContent":["\"use strict\";\n/* global toString */\n\nvar isArray = require(\"./utils\").isArray;\nvar isFunction = require(\"./utils\").isFunction;\n\n/**\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The return promise\n  is fulfilled with an array that gives all the values in the order they were\n  passed in the `promises` array argument.\n\n  Example:\n\n  ```javascript\n  var promise1 = RSVP.resolve(1);\n  var promise2 = RSVP.resolve(2);\n  var promise3 = RSVP.resolve(3);\n  var promises = [ promise1, promise2, promise3 ];\n\n  RSVP.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  var promise1 = RSVP.resolve(1);\n  var promise2 = RSVP.reject(new Error(\"2\"));\n  var promise3 = RSVP.reject(new Error(\"3\"));\n  var promises = [ promise1, promise2, promise3 ];\n\n  RSVP.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @for RSVP\n  @param {Array} promises\n  @param {String} label\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n*/\nfunction all(promises) {\n  /*jshint validthis:true */\n  var Promise = this;\n\n  if (!isArray(promises)) {\n    throw new TypeError('You must pass an array to all.');\n  }\n\n  return new Promise(function(resolve, reject) {\n    var results = [], remaining = promises.length,\n    promise;\n\n    if (remaining === 0) {\n      resolve([]);\n    }\n\n    function resolver(index) {\n      return function(value) {\n        resolveAll(index, value);\n      };\n    }\n\n    function resolveAll(index, value) {\n      results[index] = value;\n      if (--remaining === 0) {\n        resolve(results);\n      }\n    }\n\n    for (var i = 0; i < promises.length; i++) {\n      promise = promises[i];\n\n      if (promise && isFunction(promise.then)) {\n        promise.then(resolver(i), reject);\n      } else {\n        resolveAll(i, promise);\n      }\n    }\n  });\n}\n\nexports.all = all;"],"mappings":"AAAA,YAAY;;AACZ;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACD,OAAO;AACxC,IAAIE,UAAU,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,UAAU;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAGA,CAACC,QAAQ,EAAE;EACrB;EACA,IAAIC,OAAO,GAAG,IAAI;EAElB,IAAI,CAACL,OAAO,CAACI,QAAQ,CAAC,EAAE;IACtB,MAAM,IAAIE,SAAS,CAAC,gCAAgC,CAAC;EACvD;EAEA,OAAO,IAAID,OAAO,CAAC,UAASE,OAAO,EAAEC,MAAM,EAAE;IAC3C,IAAIC,OAAO,GAAG,EAAE;MAAEC,SAAS,GAAGN,QAAQ,CAACO,MAAM;MAC7CC,OAAO;IAEP,IAAIF,SAAS,KAAK,CAAC,EAAE;MACnBH,OAAO,CAAC,EAAE,CAAC;IACb;IAEA,SAASM,QAAQA,CAACC,KAAK,EAAE;MACvB,OAAO,UAASC,KAAK,EAAE;QACrBC,UAAU,CAACF,KAAK,EAAEC,KAAK,CAAC;MAC1B,CAAC;IACH;IAEA,SAASC,UAAUA,CAACF,KAAK,EAAEC,KAAK,EAAE;MAChCN,OAAO,CAACK,KAAK,CAAC,GAAGC,KAAK;MACtB,IAAI,EAAEL,SAAS,KAAK,CAAC,EAAE;QACrBH,OAAO,CAACE,OAAO,CAAC;MAClB;IACF;IAEA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,CAACO,MAAM,EAAEM,CAAC,EAAE,EAAE;MACxCL,OAAO,GAAGR,QAAQ,CAACa,CAAC,CAAC;MAErB,IAAIL,OAAO,IAAIV,UAAU,CAACU,OAAO,CAACM,IAAI,CAAC,EAAE;QACvCN,OAAO,CAACM,IAAI,CAACL,QAAQ,CAACI,CAAC,CAAC,EAAET,MAAM,CAAC;MACnC,CAAC,MAAM;QACLQ,UAAU,CAACC,CAAC,EAAEL,OAAO,CAAC;MACxB;IACF;EACF,CAAC,CAAC;AACJ;AAEAO,OAAO,CAAChB,GAAG,GAAGA,GAAG","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}