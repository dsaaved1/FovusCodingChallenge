{"ast":null,"code":"const API_ENDPOINT = 'https://g7k976a75d.execute-api.us-east-1.amazonaws.com/uploads';\nnew Vue({\n  el: \"#app\",\n  data: {\n    file: null,\n    uploadURL: ''\n  },\n  methods: {\n    onFileChange(e) {\n      console.log('File change detected');\n      let files = e.target.files || e.dataTransfer.files;\n      if (!files.length) return;\n      this.file = files[0];\n      console.log('Selected file: ', this.file);\n    },\n    removeFile: function (e) {\n      console.log('Remove clicked');\n      this.file = null;\n    },\n    uploadFile: async function (e) {\n      console.log('Upload clicked');\n\n      // Get the presigned URL\n      try {\n        console.log('Requesting presigned URL');\n        const response = await axios({\n          method: 'GET',\n          url: API_ENDPOINT,\n          params: {\n            filename: this.file.name\n          }\n        });\n        console.log('Response received: ', response.data);\n        if (!response.data || !response.data.uploadURL) {\n          throw new Error('No upload URL received from the server');\n        }\n        console.log('Uploading: ', this.file);\n        const result = await fetch(response.data.uploadURL, {\n          method: 'PUT',\n          body: this.file,\n          headers: {\n            'Content-Type': this.file.type\n          }\n        });\n        console.log('Result: ', result);\n        if (result.ok) {\n          // Final URL for the user doesn't need the query string params\n          this.uploadURL = response.data.uploadURL.split('?')[0];\n          console.log('Upload successful:', this.uploadURL);\n        } else {\n          console.error('Upload failed:', result);\n        }\n      } catch (error) {\n        console.error('Error uploading file:', error);\n      }\n    }\n  }\n});","map":{"version":3,"names":["API_ENDPOINT","Vue","el","data","file","uploadURL","methods","onFileChange","e","console","log","files","target","dataTransfer","length","removeFile","uploadFile","response","axios","method","url","params","filename","name","Error","result","fetch","body","headers","type","ok","split","error"],"sources":["/Users/diegosaavedra/Desktop/FovusCodingChallenge/frontend/src/App.js"],"sourcesContent":["const API_ENDPOINT = 'https://g7k976a75d.execute-api.us-east-1.amazonaws.com/uploads' \n\nnew Vue({\n    el: \"#app\",\n    data: {\n        file: null,\n        uploadURL: ''\n    },\n    methods: {\n        onFileChange (e) {\n            console.log('File change detected')\n            let files = e.target.files || e.dataTransfer.files\n            if (!files.length) return\n            this.file = files[0]\n            console.log('Selected file: ', this.file)\n        },\n        removeFile: function (e) {\n            console.log('Remove clicked')\n            this.file = null\n        },\n        uploadFile: async function (e) {\n            console.log('Upload clicked')\n\n            // Get the presigned URL\n            try {\n                console.log('Requesting presigned URL')\n                const response = await axios({\n                    method: 'GET',\n                    url: API_ENDPOINT,\n                    params: {\n                        filename: this.file.name\n                    }\n                })\n                console.log('Response received: ', response.data)\n                if (!response.data || !response.data.uploadURL) {\n                    throw new Error('No upload URL received from the server')\n                }\n                console.log('Uploading: ', this.file)\n\n                const result = await fetch(response.data.uploadURL, {\n                    method: 'PUT',\n                    body: this.file,\n                    headers: {\n                        'Content-Type': this.file.type\n                    }\n                })\n                console.log('Result: ', result)\n\n                if (result.ok) {\n                    // Final URL for the user doesn't need the query string params\n                    this.uploadURL = response.data.uploadURL.split('?')[0]\n                    console.log('Upload successful:', this.uploadURL)\n                } else {\n                    console.error('Upload failed:', result)\n                }\n            } catch (error) {\n                console.error('Error uploading file:', error)\n            }\n        }\n    }\n})\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,gEAAgE;AAErF,IAAIC,GAAG,CAAC;EACJC,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE;IACFC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE;EACf,CAAC;EACDC,OAAO,EAAE;IACLC,YAAYA,CAAEC,CAAC,EAAE;MACbC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,IAAIC,KAAK,GAAGH,CAAC,CAACI,MAAM,CAACD,KAAK,IAAIH,CAAC,CAACK,YAAY,CAACF,KAAK;MAClD,IAAI,CAACA,KAAK,CAACG,MAAM,EAAE;MACnB,IAAI,CAACV,IAAI,GAAGO,KAAK,CAAC,CAAC,CAAC;MACpBF,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACN,IAAI,CAAC;IAC7C,CAAC;IACDW,UAAU,EAAE,SAAAA,CAAUP,CAAC,EAAE;MACrBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACN,IAAI,GAAG,IAAI;IACpB,CAAC;IACDY,UAAU,EAAE,eAAAA,CAAgBR,CAAC,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;MAE7B;MACA,IAAI;QACAD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvC,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC;UACzBC,MAAM,EAAE,KAAK;UACbC,GAAG,EAAEpB,YAAY;UACjBqB,MAAM,EAAE;YACJC,QAAQ,EAAE,IAAI,CAAClB,IAAI,CAACmB;UACxB;QACJ,CAAC,CAAC;QACFd,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEO,QAAQ,CAACd,IAAI,CAAC;QACjD,IAAI,CAACc,QAAQ,CAACd,IAAI,IAAI,CAACc,QAAQ,CAACd,IAAI,CAACE,SAAS,EAAE;UAC5C,MAAM,IAAImB,KAAK,CAAC,wCAAwC,CAAC;QAC7D;QACAf,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACN,IAAI,CAAC;QAErC,MAAMqB,MAAM,GAAG,MAAMC,KAAK,CAACT,QAAQ,CAACd,IAAI,CAACE,SAAS,EAAE;UAChDc,MAAM,EAAE,KAAK;UACbQ,IAAI,EAAE,IAAI,CAACvB,IAAI;UACfwB,OAAO,EAAE;YACL,cAAc,EAAE,IAAI,CAACxB,IAAI,CAACyB;UAC9B;QACJ,CAAC,CAAC;QACFpB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEe,MAAM,CAAC;QAE/B,IAAIA,MAAM,CAACK,EAAE,EAAE;UACX;UACA,IAAI,CAACzB,SAAS,GAAGY,QAAQ,CAACd,IAAI,CAACE,SAAS,CAAC0B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACtDtB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACL,SAAS,CAAC;QACrD,CAAC,MAAM;UACHI,OAAO,CAACuB,KAAK,CAAC,gBAAgB,EAAEP,MAAM,CAAC;QAC3C;MACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;QACZvB,OAAO,CAACuB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}